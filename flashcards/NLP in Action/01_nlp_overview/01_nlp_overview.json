{
  "__type__": "Deck",
  "children": [],
  "crowdanki_uuid": "deck-7678",
  "deck_config_uuid": "default-config",
  "deck_configurations": [
    {
      "crowdanki_uuid": "default-config",
      "name": "Default",
      "autoplay": true,
      "dyn": false,
      "lapse": {
        "delays": [
          10
        ],
        "leechAction": 0,
        "leechFails": 8,
        "minInt": 1,
        "mult": 0
      },
      "maxTaken": 60,
      "new": {
        "bury": false,
        "delays": [
          1,
          10
        ],
        "initialFactor": 2500,
        "ints": [
          1,
          4,
          0
        ],
        "order": 1,
        "perDay": 20
      },
      "replayq": true,
      "rev": {
        "bury": false,
        "ease4": 1.3,
        "hardFactor": 1.2,
        "ivlFct": 1,
        "maxIvl": 36500,
        "perDay": 200
      },
      "timer": 0,
      "__type__": "DeckConfig"
    }
  ],
  "desc": "Comprehensive flashcards for 01 NLP Overview",
  "dyn": false,
  "extendNew": 10,
  "extendRev": 50,
  "media_files": [],
  "name": "ML:NLP:01 NLP Overview",
  "note_models": [
    {
      "crowdanki_uuid": "nlp-comprehensive-note-model",
      "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: center;\n color: black;\n background-color: white;\n}\n\n.front {\n font-weight: bold;\n color: #2c3e50;\n}\n\n.back {\n text-align: left;\n padding: 20px;\n}\n\n.concept {\n font-weight: bold;\n color: #e74c3c;\n margin-bottom: 10px;\n}\n\n.intuition {\n color: #3498db;\n font-style: italic;\n margin-bottom: 10px;\n}\n\n.mechanics {\n color: #27ae60;\n margin-bottom: 10px;\n}\n\n.tradeoffs {\n color: #f39c12;\n margin-bottom: 10px;\n}\n\n.applications {\n color: #9b59b6;\n margin-bottom: 10px;\n}\n\n.memory-hook {\n background-color: #ecf0f1;\n padding: 10px;\n border-left: 4px solid #34495e;\n font-style: italic;\n color: #34495e;\n}",
      "flds": [
        {
          "font": "Arial",
          "media": [],
          "name": "Front",
          "ord": 0,
          "rtl": false,
          "size": 20,
          "sticky": false,
          "__type__": "NoteModelField"
        },
        {
          "font": "Arial",
          "media": [],
          "name": "Back",
          "ord": 1,
          "rtl": false,
          "size": 20,
          "sticky": false,
          "__type__": "NoteModelField"
        },
        {
          "font": "Arial",
          "media": [],
          "name": "Tags",
          "ord": 2,
          "rtl": false,
          "size": 20,
          "sticky": false,
          "__type__": "NoteModelField"
        },
        {
          "font": "Arial",
          "media": [],
          "name": "Difficulty",
          "ord": 3,
          "rtl": false,
          "size": 20,
          "sticky": false,
          "__type__": "NoteModelField"
        }
      ],
      "latexPost": "\\end{document}",
      "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
      "name": "NLP Comprehensive",
      "req": [
        [
          0,
          "all"
        ]
      ],
      "sortf": 0,
      "tags": [],
      "tmpls": [
        {
          "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n<div class=\"back\">\n{{Back}}\n</div>",
          "bafmt": "",
          "bqfmt": "",
          "did": null,
          "name": "Card 1",
          "ord": 0,
          "qfmt": "<div class=\"front\">{{Front}}</div>",
          "__type__": "CardTemplate"
        }
      ],
      "type": 0,
      "__type__": "NoteModel"
    }
  ],
  "notes": [
    {
      "crowdanki_uuid": "note--5403185254754927702-7678",
      "fields": [
        "What is Natural Language Processing (NLP)?",
        "<div class=\"concept\"><strong>Concept:</strong> NLP is the field of computer science and AI that enables machines to read, understand, and generate human language.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> It's like teaching a computer to converse like a human, turning words into actionable data.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Involves parsing text into tokens, applying grammars, and using machine learning to extract meaning.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Powerful for automation but can struggle with ambiguity and requires large datasets.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Chatbots, search engines, sentiment analysis.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> NLP: Computers 'speaking' human â€“ from Siri to spam filters.</div>",
        "NLP Definition Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid--5403185254754927702-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "NLP",
        "Definition",
        "Easy"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note-6107803508957184244-7678",
      "fields": [
        "How does NLP differ from programming languages in terms of ambiguity?",
        "<div class=\"concept\"><strong>Concept:</strong> Programming languages are unambiguous with fixed rules, while NLP deals with natural languages that are fuzzy and context-dependent.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Code runs exactly as written; natural language can mean multiple things, like 'The chicken is ready to eat.'</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Programming uses compilers/interpreters for precise execution; NLP uses parsers and ML to handle variations.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Programming is reliable but rigid; NLP is flexible but error-prone in interpretation.</div><br><br><div class=\"applications\"><strong>Applications:</strong> NLP for chatbots handling user queries; programming for software development.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Programming: One meaning per line; NLP: Fuzzy like a riddle.</div>",
        "NLP Programming Languages Comparison Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid-6107803508957184244-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "NLP",
        "Programming Languages",
        "Comparison",
        "Medium"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note--1345717225636450054-7678",
      "fields": [
        "Explain the intuition behind why NLP is considered a key to Artificial General Intelligence (AGI).",
        "<div class=\"concept\"><strong>Concept:</strong> NLP enables machines to process human-like communication, a core aspect of intelligence.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Humans think and share ideas via language; machines mastering it mimic human cognition.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Involves understanding semantics, context, and generation, building towards broader AI capabilities.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Advances AGI but risks misuse like manipulation if not ethical.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Conversational AI like ChatGPT pushing towards AGI.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> NLP unlocks AGI: Words as keys to the mind's door.</div>",
        "NLP AGI Intuition Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid--1345717225636450054-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "NLP",
        "AGI",
        "Intuition",
        "Easy"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note--4373799130270859666-7678",
      "fields": [
        "What are the mechanics of tokenization in NLP?",
        "<div class=\"concept\"><strong>Concept:</strong> Tokenization splits text into tokens (words or subwords).</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Breaking a sentence into puzzle pieces for the machine to analyze.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Use methods like str.split() or advanced tokenizers to handle punctuation and variations.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Simple tokenizers miss nuances like contractions; advanced ones are computationally heavier.</div><br><br><div class=\"applications\"><strong>Applications:</strong> First step in pipelines for search or chatbots.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Tokenization: Chopping text like firewood for the NLP fire.</div>",
        "NLP Tokenization Mechanics Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid--4373799130270859666-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "NLP",
        "Tokenization",
        "Mechanics",
        "Medium"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note-1466940441073870623-7678",
      "fields": [
        "Compare the trade-offs between pattern-based and data-driven approaches in NLP.",
        "<div class=\"concept\"><strong>Concept:</strong> Pattern-based uses rules like regex; data-driven uses ML on large datasets.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Rules are handcrafted blueprints; data-driven learns from examples like a child.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Pattern: Hardcode regex for matches; Data: Train models on corpora for predictions.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Pattern is precise but brittle and labor-intensive; data-driven scalable but needs quality data and can overfit.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Pattern for simple chatbots; data for advanced like LLMs.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Pattern: Rigid ruler; Data: Flexible sponge absorbing knowledge.</div>",
        "NLP Approaches Trade-offs Hard",
        "Hard"
      ],
      "flags": 0,
      "guid": "guid-1466940441073870623-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "NLP",
        "Approaches",
        "Trade-offs",
        "Hard"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note-8311867396096289256-7678",
      "fields": [
        "What is Natural Language Understanding (NLU) and its core applications?",
        "<div class=\"concept\"><strong>Concept:</strong> NLU is the subfield of NLP focused on extracting meaning from text, often as vectors.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Machine 'comprehending' text like a reader grasping a story.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Convert text to vectors via encoders, then analyze for sentiment, intent, etc.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Handles common tasks well but struggles with sarcasm or complex logic without advanced models.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Semantic search, sentiment analysis, intent classification.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> NLU: Machine's 'ears' turning words into insights.</div>",
        "NLU Applications Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid-8311867396096289256-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "NLU",
        "Applications",
        "Medium"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note-4091374410545280616-7678",
      "fields": [
        "Describe the theory behind vector representations in NLP.",
        "<div class=\"concept\"><strong>Concept:</strong> Text is represented as numerical vectors in a vector space model for computation.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Words as points in space; similar meanings cluster together.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Use bag-of-words, TF-IDF, or embeddings; compute distances like cosine.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> High-dimensional vectors curse dimensionality; reductions like embeddings help but lose some info.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Search, clustering, similarity matching.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Vectors: Words as stars in a semantic galaxy.</div>",
        "NLP Vectors Theory Hard",
        "Hard"
      ],
      "flags": 0,
      "guid": "guid-4091374410545280616-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "NLP",
        "Vectors",
        "Theory",
        "Hard"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note--1365460864077795049-7678",
      "fields": [
        "How does Natural Language Generation (NLG) work intuitively?",
        "<div class=\"concept\"><strong>Concept:</strong> NLG generates human-like text from structured data or vectors.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Machine 'writing' stories from ideas, reverse of understanding.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Decode vectors into text using templates, models, or LLMs.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Creates plausible text but can hallucinate or be biased.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Chatbot responses, summarization, code generation.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> NLG: Machine's 'mouth' crafting words from thoughts.</div>",
        "NLG Intuition Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid--1365460864077795049-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "NLG",
        "Intuition",
        "Easy"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note--2993055329500465972-7678",
      "fields": [
        "What are the applications of NLP in society and business?",
        "<div class=\"concept\"><strong>Concept:</strong> NLP automates language tasks, impacting communication and decisions.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> From spam filters to virtual assistants, making life efficient.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Pipelines process text for insights, generation, or actions.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Profitable but risky like misinformation or bias.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Search engines, chatbots, sentiment analysis, fake review detection.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> NLP apps: Invisible helpers in emails, searches, and chats.</div>",
        "NLP Applications Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid--2993055329500465972-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "NLP",
        "Applications",
        "Medium"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note--8441839609970634308-7678",
      "fields": [
        "Explain the connection between language and thought in NLP.",
        "<div class=\"concept\"><strong>Concept:</strong> Language shapes and reflects thought; NLP manipulates 'packets of thought'.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Words as building blocks of ideas; editing text refines thinking.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Symbol manipulation in AI; NLP processes to mimic cognition.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Enhances machine 'thinking' but limited without commonsense.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Conversational AI, therapeutic chatbots.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Language-thought: Words as Lego bricks for mind castles.</div>",
        "NLP Language and Thought Connections Hard",
        "Hard"
      ],
      "flags": 0,
      "guid": "guid--8441839609970634308-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "NLP",
        "Language and Thought",
        "Connections",
        "Hard"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note--2669955652516969959-7678",
      "fields": [
        "What is a chatbot and how does it use NLP?",
        "<div class=\"concept\"><strong>Concept:</strong> A chatbot is a machine that converses using NLP pipelines.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Digital friend responding to your words intelligently.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Parse input, analyze, generate response, decide via ML or rules.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Engaging but can mislead if not aligned with ethics.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Customer service, therapy, games.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Chatbot: NLP-powered echo with a brain.</div>",
        "Chatbots NLP Definition Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid--2669955652516969959-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "Chatbots",
        "NLP",
        "Definition",
        "Easy"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note--1044592665232213652-7678",
      "fields": [
        "How do regular expressions work in building a simple chatbot?",
        "<div class=\"concept\"><strong>Concept:</strong> Regex matches patterns in text for intent recognition.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Like a lock recognizing a key phrase to unlock a response.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Compile patterns like '(hi|hello)' and match user input.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Precise for known patterns but fails on variations or typos.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Greeting recognition in basic bots.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Regex: Pattern keys opening chatbot doors.</div>",
        "Regex Chatbots Mechanics Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid--1044592665232213652-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "Regex",
        "Chatbots",
        "Mechanics",
        "Medium"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note--832965481581849189-7678",
      "fields": [
        "Discuss the trade-offs of using bag-of-words (BOW) models.",
        "<div class=\"concept\"><strong>Concept:</strong> BOW represents text as word count vectors, ignoring order.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Tossing words in a bag; counts reveal topics but not grammar.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Use Counter to bin words; compute vectors for similarity.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Simple and fast but loses word order, leading to ambiguity in complex sentences.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Sentiment analysis, basic search.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> BOW: Word salad vector â€“ tasty but unordered.</div>",
        "BOW Trade-offs Hard",
        "Hard"
      ],
      "flags": 0,
      "guid": "guid--832965481581849189-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "BOW",
        "Trade-offs",
        "Hard"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note-8922030424364104388-7678",
      "fields": [
        "Why is word order important in NLP, and what are its limitations?",
        "<div class=\"concept\"><strong>Concept:</strong> Grammar conveys logic; ignoring it loses meaning.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Shuffled words confuse like a jumbled puzzle.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Use parsers for syntax trees to capture relationships.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Essential for logic but BOW suffices for short phrases.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Query understanding, translation.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Word order: Sentence skeleton holding meaning together.</div>",
        "Grammar Word Order Intuition Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid-8922030424364104388-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "Grammar",
        "Word Order",
        "Intuition",
        "Medium"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note--812839198012722091-7678",
      "fields": [
        "What are the five main subsystems in a chatbot NLP pipeline?",
        "<div class=\"concept\"><strong>Concept:</strong> Parse, Analyze, Generate, Decide, Database.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Stages from understanding input to crafting and choosing output.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Extract features, score, compose responses, select best, store knowledge.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Comprehensive but complex to implement.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Full conversational systems.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> PAGDD: Pipeline Assembly for Grokking Dialogues Daily.</div>",
        "Chatbots Pipeline Theory Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid--812839198012722091-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "Chatbots",
        "Pipeline",
        "Theory",
        "Easy"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note-6010600034501739303-7678",
      "fields": [
        "How does depth in NLP processing enhance capabilities?",
        "<div class=\"concept\"><strong>Concept:</strong> Layers like POS tagging, entity recognition build to knowledge bases.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Peeling onion layers for deeper insights.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Stack algorithms for feature extraction to inference.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> More accurate but computationally intensive.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Advanced chatbots, QA systems.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> NLP depth: Diving deeper for pearl-like knowledge.</div>",
        "NLP Processing Depth Applications Hard",
        "Hard"
      ],
      "flags": 0,
      "guid": "guid-6010600034501739303-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "NLP",
        "Processing Depth",
        "Applications",
        "Hard"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note--8225495466993514479-7678",
      "fields": [
        "Explain Natural Language IQ dimensions for NLP systems.",
        "<div class=\"concept\"><strong>Concept:</strong> Measured by breadth (variety) and depth (complexity) of capabilities.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Broad: Jack-of-all-trades; Deep: Master specialist.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Plot systems on axes; e.g., Alexa broad but shallow.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Broad systems versatile but superficial; deep ones focused but limited.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Evaluating chatbots or translators.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> NL IQ: Breadth vs. Depth â€“ wide ocean or deep well.</div>",
        "NLP IQ Connections Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid--8225495466993514479-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "NLP",
        "IQ",
        "Connections",
        "Medium"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note--3164283328331898414-7678",
      "fields": [
        "What are the dangers and profits of unleashing NLP, as per the chapter?",
        "<div class=\"concept\"><strong>Concept:</strong> Profitable for business; dangerous for manipulation or bias.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Genie granting wishes but with twists.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Automates tasks but can spread misinformation.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Efficiency gains vs. ethical risks like AI safety.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Social media bots, customer service.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> NLP genie: Wish for profit, beware the curse.</div>",
        "NLP Ethics Trade-offs Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid--3164283328331898414-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "NLP",
        "Ethics",
        "Trade-offs",
        "Easy"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note-8677214430076626423-7678",
      "fields": [
        "How can embeddings improve upon basic vector models mathematically?",
        "<div class=\"concept\"><strong>Concept:</strong> Embeddings reduce dimensions while capturing semantics.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Compressing word meanings into dense vectors.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Train neural nets to predict contexts; use cosine distance.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Better similarity but requires training data.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Semantic search, analogy solving.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Embeddings: Word essence bottled in vectors.</div>",
        "Embeddings Math Hard",
        "Hard"
      ],
      "flags": 0,
      "guid": "guid-8677214430076626423-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "Embeddings",
        "Math",
        "Hard"
      ],
      "__type__": "Note"
    },
    {
      "crowdanki_uuid": "note-7706659699730377564-7678",
      "fields": [
        "Describe a use case for finite state machines in NLP.",
        "<div class=\"concept\"><strong>Concept:</strong> FSMs process sequences with states, like regex for patterns.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Machine following a map of language rules.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> States transition on inputs; output based on matches.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Efficient for simple patterns but not for complex ambiguity.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Greeting recognition in chatbots.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> FSM: Language lock with state keys.</div>",
        "FSM Use Cases Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid-7706659699730377564-7678",
      "note_model_uuid": "nlp-comprehensive-note-model",
      "tags": [
        "FSM",
        "Use Cases",
        "Medium"
      ],
      "__type__": "Note"
    }
  ]
}