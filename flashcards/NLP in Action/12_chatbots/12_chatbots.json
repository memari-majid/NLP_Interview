{
  "__type__": "Deck",
  "children": [],
  "crowdanki_uuid": "deck-chapter12",
  "deck_config_uuid": "default-config",
  "deck_configurations": [
    {
      "__type__": "DeckConfig",
      "crowdanki_uuid": "default-config",
      "name": "Default",
      "autoplay": true,
      "dyn": false,
      "lapse": {
        "delays": [
          10
        ],
        "leechAction": 0,
        "leechFails": 8,
        "minInt": 1,
        "mult": 0
      },
      "maxTaken": 60,
      "new": {
        "bury": false,
        "delays": [
          1,
          10
        ],
        "initialFactor": 2500,
        "ints": [
          1,
          4,
          0
        ],
        "order": 1,
        "perDay": 20
      },
      "replayq": true,
      "rev": {
        "bury": false,
        "ease4": 1.3,
        "hardFactor": 1.2,
        "ivlFct": 1,
        "maxIvl": 36500,
        "perDay": 200
      },
      "timer": 0
    }
  ],
  "desc": "Comprehensive flashcards for 12 Dialog Engines",
  "dyn": false,
  "extendNew": 10,
  "extendRev": 50,
  "media_files": [],
  "name": "ML:NLP:12 Dialog Engines",
  "note_models": [
    {
      "__type__": "NoteModel",
      "crowdanki_uuid": "ml-nlp-interview-model",
      "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: center;\n color: black;\n background-color: white;\n}\n\n.front {\n font-weight: bold;\n color: #2c3e50;\n}\n\n.back {\n text-align: left;\n padding: 20px;\n}\n\n.concept {\n font-weight: bold;\n color: #e74c3c;\n margin-bottom: 10px;\n}\n\n.intuition {\n color: #3498db;\n font-style: italic;\n margin-bottom: 10px;\n}\n\n.mechanics {\n color: #27ae60;\n margin-bottom: 10px;\n}\n\n.tradeoffs {\n color: #f39c12;\n margin-bottom: 10px;\n}\n\n.applications {\n color: #9b59b6;\n margin-bottom: 10px;\n}\n\n.memory-hook {\n background-color: #ecf0f1;\n padding: 10px;\n border-left: 4px solid #34495e;\n font-style: italic;\n color: #34495e;\n}",
      "flds": [
        {
          "__type__": "NoteModelField",
          "font": "Arial",
          "media": [],
          "name": "Front",
          "ord": 0,
          "rtl": false,
          "size": 20,
          "sticky": false
        },
        {
          "__type__": "NoteModelField",
          "font": "Arial",
          "media": [],
          "name": "Back",
          "ord": 1,
          "rtl": false,
          "size": 20,
          "sticky": false
        },
        {
          "__type__": "NoteModelField",
          "font": "Arial",
          "media": [],
          "name": "Tags",
          "ord": 2,
          "rtl": false,
          "size": 20,
          "sticky": false
        },
        {
          "__type__": "NoteModelField",
          "font": "Arial",
          "media": [],
          "name": "Difficulty",
          "ord": 3,
          "rtl": false,
          "size": 20,
          "sticky": false
        }
      ],
      "latexPost": "\\end{document}",
      "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
      "name": "ML/NLP Interview",
      "req": [
        [
          0,
          "all"
        ]
      ],
      "sortf": 0,
      "tags": [],
      "tmpls": [
        {
          "__type__": "CardTemplate",
          "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n<div class=\"back\">\n{{Back}}\n</div>",
          "bafmt": "",
          "bqfmt": "",
          "did": null,
          "name": "Card 1",
          "ord": 0,
          "qfmt": "<div class=\"front\">{{Front}}</div>"
        }
      ],
      "type": 0
    }
  ],
  "notes": [
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-1",
      "fields": [
        "What is a chatbot?",
        "<div class=\"concept\"><strong>Concept:</strong> A chatbot is a computer program that engages in back-and-forth conversation with a human using natural language, through text or speech.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Imagine a digital companion that simulates human-like dialogue to assist or entertain.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> It processes user input via NLP and generates responses based on predefined rules or AI models.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Simple to implement basic ones, but advanced ones require complex NLP; can be frustrating if not intelligent enough.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Customer service, virtual assistants like Siri.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Think of it as a 'chat robot' â€“ chats like a human, but powered by code.</div>",
        "NLP Chatbot Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid-12-1",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Chatbot",
        "Easy"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-2",
      "fields": [
        "Explain the intuition behind using chatbots in healthcare.",
        "<div class=\"concept\"><strong>Concept:</strong> Chatbots in healthcare provide answers to health questions, schedule appointments, or offer preliminary diagnoses.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> They act as an accessible first-line support, like a virtual nurse for quick queries.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Use NLP to understand symptoms and retrieve or generate advice from medical knowledge bases.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Improves access but risks inaccurate advice; regulated by country laws.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Woebot for mental health therapy exercises.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Picture a 'health bot' whispering wellness tips in your ear.</div>",
        "NLP Applications Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid-12-2",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Applications",
        "Medium"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-3",
      "fields": [
        "Compare the trade-offs of generative vs. rule-based chatbots.",
        "<div class=\"concept\"><strong>Concept:</strong> Generative chatbots use models like LLMs to create responses; rule-based use predefined templates and logic.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Generative is flexible like improvisation; rule-based is scripted like a play.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Generative: Prompt LLMs; Rule-based: Conversation graphs with triggers.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Generative: Creative but unpredictable/hallucinatory; Rule-based: Reliable but rigid and maintenance-heavy.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Generative for open chats; Rule-based for controlled customer service.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Generative as a jazz musician (free-form), rule-based as a classical pianist (structured).</div>",
        "NLP Chatbot Hard",
        "Hard"
      ],
      "flags": 0,
      "guid": "guid-12-3",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Chatbot",
        "Hard"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-4",
      "fields": [
        "What is conversation design?",
        "<div class=\"concept\"><strong>Concept:</strong> Conversation design is designing engaging dialogs for chatbots, akin to UI design for conversations.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Crafting natural, flowing talks like scripting a friendly chat.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Define goals, user profiles, draft happy paths, diagram trees, choose NLP algorithms.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Balances user needs with bot capabilities; time-intensive but improves UX.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Building math tutor bots like Rori.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Like planning a dinner conversation to keep guests engaged.</div>",
        "NLP ConversationDesign Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid-12-4",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "ConversationDesign",
        "Easy"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-5",
      "fields": [
        "Describe the mechanics of building a conversation tree.",
        "<div class=\"concept\"><strong>Concept:</strong> A conversation tree is a flowchart of possible dialogs between user and chatbot.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Branches represent user choices, like a choose-your-own-adventure book.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Draft happy paths, generalize to diagram with states (bot messages) and triggers (user intents).</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Comprehensive but complex for large scopes; handles loops for repetition.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Onboarding in educational chatbots.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Tree with branches as decision paths in a forest adventure.</div>",
        "NLP ConversationDesign Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid-12-5",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "ConversationDesign",
        "Medium"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-6",
      "fields": [
        "How do Grice's maxims apply to chatbot design, and what are potential edge cases?",
        "<div class=\"concept\"><strong>Concept:</strong> Grice's maxims: Quantity (informative), Quality (truthful), Relation (relevant), Manner (clear).</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Ensures cooperative, meaningful dialog like human conversations.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Design responses to be informative, truthful, relevant, and clear; avoid violations.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Humans forgive violations more than bots; bots can't self-correct easily.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Preventing ambiguous or irrelevant bot replies.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> QQRM: Quantity, Quality, Relation, Manner â€“ 'Quick Quality Response Mode'.</div>",
        "NLP Principles Hard",
        "Hard"
      ],
      "flags": 0,
      "guid": "guid-12-6",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Principles",
        "Hard"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-7",
      "fields": [
        "What is intent recognition in chatbots?",
        "<div class=\"concept\"><strong>Concept:</strong> Classifying user messages by their intended meaning or goal.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Bot 'reads between the lines' to understand user wants.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Use ML classifiers on embeddings to match intents with confidence scores.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Handles variations but needs training data; thresholds for fallbacks.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Greeting detection in virtual assistants.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Like guessing a friend's mood from their text.</div>",
        "NLP NLU Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid-12-7",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "NLU",
        "Easy"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-8",
      "fields": [
        "Explain slot filling and its connection to entities.",
        "<div class=\"concept\"><strong>Concept:</strong> Extracting parameters (slots) from user utterances needed for actions.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Filling in blanks in a form from conversation.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Use NER to detect entities; predefined slots guide extraction.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Precise but requires predefined slots; ignores irrelevant entities.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Weather bot extracting location/time.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Slots as puzzle pieces fitting user info.</div>",
        "NLP NLU Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid-12-8",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "NLU",
        "Medium"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-9",
      "fields": [
        "How does multi-label classification enhance intent recognition, with math involved?",
        "<div class=\"concept\"><strong>Concept:</strong> Assigning multiple intent labels to a single utterance.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Captures nuanced, multi-faceted user messages.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Independent binary classifiers per label; predict probabilities, threshold for assignment.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Flexible but computationally intensive; risk of over-labeling.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Math bot detecting answer + negative feedback.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Like tagging a photo with multiple labels.</div>",
        "NLP NLU Hard",
        "Hard"
      ],
      "flags": 0,
      "guid": "guid-12-9",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "NLU",
        "Hard"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-10",
      "fields": [
        "What is a template-based response generation?",
        "<div class=\"concept\"><strong>Concept:</strong> Using predefined string templates for bot responses.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Canned replies filled with variables.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> f-strings or Jinja2 with context variables.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Easy control but lacks novelty.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Simple greetings in rule-based bots.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Mad Libs for bots.</div>",
        "NLP NLG Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid-12-10",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "NLG",
        "Easy"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-11",
      "fields": [
        "Describe the mechanics of retrieval-based response generation.",
        "<div class=\"concept\"><strong>Concept:</strong> Searching a knowledge base for relevant responses.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Bot 'looks up' answers like a librarian.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Semantic search on documents or graphs to retrieve and adapt content.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Scalable content but depends on database quality.</div><br><br><div class=\"applications\"><strong>Applications:</strong> QA bots using RAG.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Bot as a search engine whisperer.</div>",
        "NLP NLG Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid-12-11",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "NLG",
        "Medium"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-12",
      "fields": [
        "Compare programmatic response generation with generative approaches.",
        "<div class=\"concept\"><strong>Concept:</strong> Programmatic: Custom code for responses; Generative: LLMs for on-the-fly creation.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Programmatic is engineered logic; generative is creative AI.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Programmatic: RNG for math problems; Generative: Prompt engineering.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Programmatic: Precise but limited; Generative: Flexible but error-prone.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Math quizzes vs. open chats.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Programmatic as recipe following, generative as chef improvising.</div>",
        "NLP NLG Hard",
        "Hard"
      ],
      "flags": 0,
      "guid": "guid-12-12",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "NLG",
        "Hard"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-13",
      "fields": [
        "What is Retrieval Augmented Generation (RAG)?",
        "<div class=\"concept\"><strong>Concept:</strong> Augmenting LLM prompts with retrieved text from search.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Grounds AI in real data to prevent hallucinations.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Search documents, insert into prompt, generate response.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Accurate but needs good search; allows smaller LLMs.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Private QA on personal docs.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> RAG as 'retrieve and generate' â€“ fetch facts, then chat.</div>",
        "NLP Generative Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid-12-13",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Generative",
        "Easy"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-14",
      "fields": [
        "How does LangChain facilitate LLM integration in chatbots?",
        "<div class=\"concept\"><strong>Concept:</strong> LangChain is a library for chaining LLM calls with prompts and memory.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Builds conversational flows like linking chains.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Use chains, prompts, memory for stateful dialogs.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Abstracts APIs but prompt engineering needed.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Math tutor with conversation history.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Chain links as prompt steps.</div>",
        "NLP Frameworks Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid-12-14",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Frameworks",
        "Medium"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-15",
      "fields": [
        "Discuss challenges in using LLMs for math tutoring, including edge cases.",
        "<div class=\"concept\"><strong>Concept:</strong> LLMs struggle with math reasoning despite language prowess.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Good at words, bad at numbers â€“ treats them as tokens.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Prompt with examples; but may approve wrong answers.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Engaging but unreliable; combine with rules.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Growth mindset chats, not calculations.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> LLMs as poets, not accountants.</div>",
        "NLP Generative Hard",
        "Hard"
      ],
      "flags": 0,
      "guid": "guid-12-15",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Generative",
        "Hard"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-16",
      "fields": [
        "What is the HEART framework for chatbot evaluation?",
        "<div class=\"concept\"><strong>Concept:</strong> HEART: Happiness, Engagement, Adoption, Retention, Task success.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Measures user journey from start to satisfaction.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Track metrics like NPS, session length, return rates.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Comprehensive but select based on goals.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Educational bot retention.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> HEART beats for user love.</div>",
        "NLP Evaluation Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid-12-16",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Evaluation",
        "Easy"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-17",
      "fields": [
        "Explain NLU performance metrics for intent-based chatbots.",
        "<div class=\"concept\"><strong>Concept:</strong> F1 score for intent classification accuracy.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Balances precision and recall for understanding.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Multiclass F1; per-intent scores.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Good for imbalance but needs labeled data.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Measuring greeting recognition.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> F1 as Formula 1 â€“ fast, balanced metric.</div>",
        "NLP Evaluation Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid-12-17",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Evaluation",
        "Medium"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-18",
      "fields": [
        "How to evaluate generative chatbots quantitatively, with connections to QA metrics?",
        "<div class=\"concept\"><strong>Concept:</strong> Use EM, accuracy, QA F1 for response quality.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Check if generated text matches expected closely.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Word overlap for precision/recall in F1.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Stringent EM vs. lenient overlap; hard for open-ended.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Comparing LLM answers to human ones.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> EM as 'exact match' in a game show.</div>",
        "NLP Evaluation Hard",
        "Hard"
      ],
      "flags": 0,
      "guid": "guid-12-18",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Evaluation",
        "Hard"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-19",
      "fields": [
        "What are implicit and explicit confirmations in chatbots?",
        "<div class=\"concept\"><strong>Concept:</strong> Verifying understanding: explicit asks directly, implicit embeds in response.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Like paraphrasing to confirm hearing correctly.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Explicit: 'Do you mean X?'; Implicit: 'For X, here is...'</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Explicit clearer but interrupts flow.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Booking confirmations.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Explicit as direct question, implicit as subtle nod.</div>",
        "NLP Principles Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid-12-19",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Principles",
        "Easy"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-20",
      "fields": [
        "Discuss the use of GUI elements in text-based chatbots.",
        "<div class=\"concept\"><strong>Concept:</strong> Incorporating buttons, menus for navigation in chats.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Blends chat with clickable options for ease.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Embed in messaging platforms like WhatsApp.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Improves UX but overuse reduces engagement.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Option selection in surveys.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Buttons as shortcuts in a chat maze.</div>",
        "NLP UX Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid-12-20",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "UX",
        "Medium"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-21",
      "fields": [
        "How can conversation graphs be stored and scaled?",
        "<div class=\"concept\"><strong>Concept:</strong> Graphs as data structures for dialog flows.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Nodes as states, edges as transitions.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Store in relational DB like PostgreSQL with JSON context.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Scalable but needs JSON support; no need for graph DBs.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Rule-based bots with loops.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Graph as a map of conversation roads.</div>",
        "NLP Graphs Hard",
        "Hard"
      ],
      "flags": 0,
      "guid": "guid-12-21",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Graphs",
        "Hard"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-22",
      "fields": [
        "What is Rasa and how is it used for intent-based chatbots?",
        "<div class=\"concept\"><strong>Concept:</strong> Open source framework for building conversational AI with intents and stories.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> YAML-based scripting for dialog flows.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Define intents, responses, stories; train NLU pipeline.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Flexible but requires coding; customizable pipeline.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Onboarding dialogs.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Rasa as 'rational assistant' builder.</div>",
        "NLP Frameworks Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid-12-22",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Frameworks",
        "Easy"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-23",
      "fields": [
        "Describe maintaining a chatbot's design iteratively.",
        "<div class=\"concept\"><strong>Concept:</strong> Using user data to improve dialogs and NLU.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Listen to users, fix gaps like a evolving story.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Analyze logs, label utterances, retrain models, add branches.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Data-driven but ongoing effort.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Adding responses to common off-script messages.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Bot as a plant â€“ prune and grow based on feedback.</div>",
        "NLP Maintenance Medium",
        "Medium"
      ],
      "flags": 0,
      "guid": "guid-12-23",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Maintenance",
        "Medium"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-24",
      "fields": [
        "Connect chatbot evaluation to broader NLP metrics, with examples.",
        "<div class=\"concept\"><strong>Concept:</strong> Blend NLU metrics (F1) with UX (HEART) and impact.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Not just accuracy, but user joy and goal achievement.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> F1 for intents, NPS for happiness, retention rates.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Quantitative vs. qualitative; focus on relevant ones.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Educational impact via mastery scores.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> Evaluate like grading a student â€“ multiple criteria.</div>",
        "NLP Evaluation Hard",
        "Hard"
      ],
      "flags": 0,
      "guid": "guid-12-24",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Evaluation",
        "Hard"
      ]
    },
    {
      "__type__": "Note",
      "crowdanki_uuid": "note-12-25",
      "fields": [
        "What tools are needed to give a chatbot a voice?",
        "<div class=\"concept\"><strong>Concept:</strong> STT for input, TTS for output.</div><br><br><div class=\"intuition\"><strong>Intuition:</strong> Ears and mouth for the bot.</div><br><br><div class=\"mechanics\"><strong>Mechanics:</strong> Whisper for STT, SpeechT5 for TTS.</div><br><br><div class=\"tradeoffs\"><strong>Trade-offs:</strong> Natural but compute-intensive.</div><br><br><div class=\"applications\"><strong>Applications:</strong> Voice assistants like Mycroft.</div><br><br><div class=\"memory-hook\"><strong>Memory Hook:</strong> STT/TTS as speak and listen.</div>",
        "NLP Voice Easy",
        "Easy"
      ],
      "flags": 0,
      "guid": "guid-12-25",
      "note_model_uuid": "ml-nlp-interview-model",
      "tags": [
        "NLP",
        "Voice",
        "Easy"
      ]
    }
  ]
}