{
  "__type__": "Deck",
  "children": [],
  "crowdanki_uuid": "nlp-syntax-and-parsing-2024",
  "deck_config_uuid": "nlp-comprehensive-config",
  "deck_configurations": [
    {
      "__type__": "DeckConfig",
      "autoplay": true,
      "crowdanki_uuid": "nlp-comprehensive-config",
      "dyn": false,
      "name": "Syntax and Parsing",
      "new": {
        "bury": true,
        "delays": [
          1,
          10
        ],
        "initialFactor": 2500,
        "ints": [
          1,
          4,
          7
        ],
        "order": 1,
        "perDay": 15,
        "separate": true
      },
      "rev": {
        "bury": true,
        "ease4": 1.3,
        "fuzz": 0.05,
        "ivlFct": 1.0,
        "maxIvl": 36500,
        "minSpace": 1,
        "perDay": 100
      }
    }
  ],
  "desc": "Grammatical structure analysis and parsing algorithms",
  "dyn": 0,
  "extendNew": 10,
  "extendRev": 50,
  "media_files": [],
  "name": "Syntax and Parsing",
  "note_models": [
    {
      "__type__": "NoteModel",
      "crowdanki_uuid": "nlp-comprehensive-model",
      "css": "\n.card {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    font-size: 16px;\n    line-height: 1.4;\n    color: #333;\n    background-color: #fafafa;\n    padding: 20px;\n    max-width: 500px;\n    margin: 0 auto;\n}\n\n.front { background-color: #e3f2fd; }\n.back { background-color: #f3e5f5; }\n\nb { color: #1976d2; font-weight: 600; }\n.formula { font-family: 'Courier New', monospace; background: #f5f5f5; padding: 2px 4px; }\n.example { font-style: italic; color: #555; }\n                    ",
      "flds": [
        {
          "__type__": "NoteModelField",
          "name": "Front",
          "ord": 0,
          "sticky": false
        },
        {
          "__type__": "NoteModelField",
          "name": "Back",
          "ord": 1,
          "sticky": false
        },
        {
          "__type__": "NoteModelField",
          "name": "Topic",
          "ord": 2,
          "sticky": false
        },
        {
          "__type__": "NoteModelField",
          "name": "Type",
          "ord": 3,
          "sticky": false
        }
      ],
      "name": "NLP Comprehensive",
      "req": [
        [
          0,
          "any",
          [
            0
          ]
        ]
      ],
      "sortf": 0,
      "tags": [],
      "tmpls": [
        {
          "__type__": "CardTemplate",
          "afmt": "<div class=\"card back\">{{Front}}<hr>{{Back}}<br><br><small><i>{{Topic}} • {{Type}}</i></small></div>",
          "bafmt": "",
          "bqfmt": "",
          "did": null,
          "name": "Card",
          "ord": 0,
          "qfmt": "<div class=\"card front\">{{Front}}</div>"
        }
      ],
      "type": 0,
      "vers": []
    }
  ],
  "notes": [
    {
      "__type__": "Note",
      "fields": [
        "What is constituency parsing?",
        "<b>Goal:</b> Build hierarchical phrase structure tree<br>\n<b>Units:</b> Noun phrases (NP), verb phrases (VP), sentences (S)<br>\n<b>Example:</b> [S [NP The cat] [VP [V sat] [PP on [NP the mat]]]]<br>\n<b>Output:</b> Nested tree structure showing grammatical relationships",
        "Syntax and Parsing",
        "concept"
      ],
      "guid": "nlp_a97076fa",
      "note_model_uuid": "nlp-comprehensive-model",
      "tags": [
        "syntax_and_parsing",
        "concept"
      ]
    },
    {
      "__type__": "Note",
      "fields": [
        "What is dependency parsing?",
        "<b>Goal:</b> Identify head-dependent relationships between words<br>\n<b>Output:</b> Directed graph with labeled edges<br>\n<b>Example:</b> \"cat\" ← nsubj ← \"sat\" → dobj → \"fish\"<br>\n<b>Advantage:</b> More suitable for free word order languages",
        "Syntax and Parsing",
        "concept"
      ],
      "guid": "nlp_64f739b7",
      "note_model_uuid": "nlp-comprehensive-model",
      "tags": [
        "syntax_and_parsing",
        "concept"
      ]
    },
    {
      "__type__": "Note",
      "fields": [
        "What is the Earley parsing algorithm?",
        "<b>Type:</b> Chart parsing algorithm for context-free grammars<br>\n<b>Method:</b> Dynamic programming with three operations (scan, predict, complete)<br>\n<b>Complexity:</b> O(n³) for general CFG, O(n²) for unambiguous<br>\n<b>Advantage:</b> Handles left-recursive and ambiguous grammars",
        "Syntax and Parsing",
        "concept"
      ],
      "guid": "nlp_1b151bfd",
      "note_model_uuid": "nlp-comprehensive-model",
      "tags": [
        "syntax_and_parsing",
        "concept"
      ]
    },
    {
      "__type__": "Note",
      "fields": [
        "What is shift-reduce parsing?",
        "<b>Actions:</b> Shift (move word to stack) or Reduce (apply grammar rule)<br>\n<b>Data structures:</b> Input buffer and stack<br>\n<b>Decision:</b> At each step, choose shift or reduce action<br>\n<b>Modern:</b> Neural transition-based parsers use this framework",
        "Syntax and Parsing",
        "concept"
      ],
      "guid": "nlp_69fa7e92",
      "note_model_uuid": "nlp-comprehensive-model",
      "tags": [
        "syntax_and_parsing",
        "concept"
      ]
    },
    {
      "__type__": "Note",
      "fields": [
        "What is the difference between top-down and bottom-up parsing?",
        "<b>Top-down:</b> Start with start symbol, expand to match input<br>\n<b>Bottom-up:</b> Start with terminals, reduce to start symbol<br>\n<b>Examples:</b> Recursive descent (top-down), shift-reduce (bottom-up)<br>\n<b>Trade-offs:</b> Top-down intuitive, bottom-up handles left recursion",
        "Syntax and Parsing",
        "concept"
      ],
      "guid": "nlp_5832b32b",
      "note_model_uuid": "nlp-comprehensive-model",
      "tags": [
        "syntax_and_parsing",
        "concept"
      ]
    },
    {
      "__type__": "Note",
      "fields": [
        "What is attachment ambiguity in parsing?",
        "<b>Problem:</b> Unclear which constituent a phrase modifies<br>\n<b>Example:</b> \"I saw the man with the telescope\" (who has telescope?)<br>\n<b>PP-attachment:</b> Common case of prepositional phrase attachment<br>\n<b>Resolution:</b> Statistical preferences, semantic knowledge",
        "Syntax and Parsing",
        "concept"
      ],
      "guid": "nlp_6e6e2f67",
      "note_model_uuid": "nlp-comprehensive-model",
      "tags": [
        "syntax_and_parsing",
        "concept"
      ]
    },
    {
      "__type__": "Note",
      "fields": [
        "What is a head in dependency grammar?",
        "<b>Definition:</b> Syntactic governor that determines phrase properties<br>\n<b>Example:</b> In \"red car\", \"car\" is head (determines it's a noun phrase)<br>\n<b>Relations:</b> Dependencies point from dependent to head<br>\n<b>Root:</b> Each sentence has one root node (usually main verb)",
        "Syntax and Parsing",
        "concept"
      ],
      "guid": "nlp_eb040ba3",
      "note_model_uuid": "nlp-comprehensive-model",
      "tags": [
        "syntax_and_parsing",
        "concept"
      ]
    },
    {
      "__type__": "Note",
      "fields": [
        "What are universal dependencies?",
        "<b>Goal:</b> Cross-linguistically consistent dependency annotation<br>\n<b>Relations:</b> Standard set of grammatical relations (nsubj, dobj, amod)<br>\n<b>Benefit:</b> Enables consistent parsing across languages<br>\n<b>Coverage:</b> Available for 100+ languages with unified guidelines",
        "Syntax and Parsing",
        "concept"
      ],
      "guid": "nlp_12f53b7c",
      "note_model_uuid": "nlp-comprehensive-model",
      "tags": [
        "syntax_and_parsing",
        "concept"
      ]
    }
  ]
}