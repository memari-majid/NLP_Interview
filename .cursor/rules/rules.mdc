---
description: Comprehensive rules for designing effective, memorable ML/NLP interview flashcards optimized for Anki spaced repetition with APKG-first workflow
globs: ["**/*.py", "**/*.md", "**/*.json"]
alwaysApply: true
---

# üß† ML/NLP Interview Flashcard Design Rules
*Research-backed principles for maximum retention and rapid recall with optimized APKG workflow*

## üéØ Core Memory Optimization Principles

### **1. Atomic Learning Principle**
- **One concept per card** - Never combine multiple ideas
- **Single question focus** - Each card tests exactly one piece of knowledge
- **Minimum effective dose** - Include only essential information
- **Clear learning objective** - Every card should have obvious success criteria

### **2. Active Recall Design**
- **Question format over statements** - "What is X?" not "X is..."
- **Fill-in-the-blank prompts** - Force reconstruction from memory
- **Cue-based triggers** - Use contextual hints that mirror interview scenarios
- **Progressive disclosure** - Build from simple to complex concepts

### **2.1 Interview Card Style (High-Level, No Code)**
- **No code in questions/answers** - Cards teach concepts, not snippets
- **One algorithm per card** - Do not split an algorithm into multiple QAs
- **Include variable definitions** when formulas are shown
- **Intuitive, short answers** - 2-4 bullet lines; plain language
- **Define symbols inline** - e.g., Q=query, K=key, V=value, X=embeddings
- **6-section structured answers** - Concept, Intuition, Mechanics, Trade-offs, Applications, Memory Hook

### **3. Cognitive Load Management**
- **7¬±2 rule** - Never exceed 9 discrete pieces of information per card
- **Visual chunking** - Use formatting to group related elements
- **Concise language** - Eliminate unnecessary words and complexity
- **Immediate comprehension** - Card should be understood within 5 seconds

## üìè Technical Specifications for ML/NLP Cards

### **Repository Structure & Workflow**
- **Source files**: `data/source/flashcards/[TOPIC]/XX_chapter/XX_chapter.json`
- **Output files**: `data/output/apkg_files/` (generated APKG files)
- **Conversion tool**: `python generate_apkg.py` (runs from repository root)
- **Hierarchical naming**: `ML:[TOPIC]:XX [Chapter Name]` (e.g., `ML:LLM:01 LLM Foundations`)
- **Target**: 15-25 cards per chapter with interview-realistic questions

### **Concept-Only Cards (Default)**
```
‚úÖ OPTIMAL:
- No code; short, intuitive prose
- 1 algorithm/concept per card
- 2‚Äì4 lines total (headline + key insight + definition)
- If formula shown, include symbol meanings

‚ùå AVOID:
- Splitting a single algorithm across multiple cards
- Copying function signatures or code blocks
- Vague prompts without definitions
```

### **Formula Cards**
```
Front: "Write the TF-IDF formula"
Back: TF √ó log(N/df)
      Where: N = total docs, df = docs with term

ALWAYS INCLUDE:
- Mathematical notation
- Variable definitions
- Edge case handling (e.g., df=0)
- Intuitive explanation in plain English
```

### **Algorithm Cards (Interview Mode)**
```
Front: "What is self-attention?"
Back: Weigh tokens by relevance to each other in a sequence.
      Q=query, K=key, V=value, X=input embeddings.
      Formula: softmax(QK^T/‚àöd_k)V (scale prevents peaky softmax).
```

### **Structured Answer Cards (Current Standard)**
```
‚úÖ STRUCTURE (6 sections):
- Concept: Clear definition (1 line)
- Intuition: Simple explanation (1 line)
- Mechanics: How it works (1 line)
- Trade-offs: Pros and cons (1 line)
- Applications: Real use cases (1 line)
- Memory Hook: Easy to remember phrase (1 line)

TOTAL: 6 sections, continuous flow (no empty lines between sections)
```

### **JSON Format Requirements**
```
‚úÖ CROWDANKI COMPATIBLE:
- Complete deck structure with __type__, children, note_models
- Professional CSS styling (Segoe UI fonts, color-coded sections)
- No <strong> tags on section labels (colored but not bold)
- 4 fields per note: Front, Back, Tags, Difficulty
- Mobile-responsive design with proper spacing
```

## üé™ Mobile-First Design Standards

### **APKG-First Distribution**
- **Native Anki format**: APKG files for one-click import
- **No add-ons required**: Works with vanilla Anki installation
- **Universal compatibility**: Cross-platform (Windows, Mac, Linux, mobile)
- **Hierarchical organization**: Creates organized folder structure in Anki
- **Batch processing**: Generate all APKG files with single command

### **Screen Optimization**
- **Viewport width**: Assume 375px (iPhone standard)
- **Font size**: Minimum 16px for readability
- **Line spacing**: 1.4x for comfortable reading
- **Touch targets**: Minimum 44px for buttons

### **Code Formatting**
```python
# ‚úÖ GOOD: Mobile-readable
def cosine_sim(a, b):
    dot = sum(x*y for x,y in zip(a,b))
    norm_a = sum(x**2 for x in a)**0.5
    norm_b = sum(x**2 for x in b)**0.5
    return dot / (norm_a * norm_b)

# ‚ùå BAD: Requires horizontal scrolling
def cosine_similarity(vector_a, vector_b): return sum(a*b for a,b in zip(vector_a, vector_b)) / (sum(a**2 for a in vector_a)**0.5 * sum(b**2 for b in vector_b)**0.5)
```

## üß™ Spaced Repetition Optimization

### **Difficulty Calibration**
Target success rates:
- **Again**: <15% (cards not too hard)
- **Hard**: <25% (appropriate challenge)
- **Good**: 50-60% (optimal difficulty)
- **Easy**: <10% (not too simple)

### **Review Time Targets**
- **New cards**: 15-30 seconds
- **Review cards**: 5-15 seconds
- **Failed cards**: 30-45 seconds (with explanation)

### **Interval Progression**
```
New card schedule:
1 min ‚Üí 10 min ‚Üí 1 day ‚Üí 4 days ‚Üí 7 days ‚Üí 2 weeks ‚Üí 1 month

Review multipliers:
- Again: Reset to 1 minute
- Hard: 1.2x previous interval
- Good: 2.5x previous interval  
- Easy: 1.3x good interval
```

## üèóÔ∏è ML/NLP-Specific Card Architecture

### **Topic Organization**
- **LLM Topics**: `ML:LLM:XX [Chapter Name]` (10 chapters ready)
- **ML Fundamentals**: `ML:ML_Fundamentals:XX [Chapter Name]` (5 topics ready)
- **NLP Topics**: `ML:NLP:XX [Chapter Name]` (12 chapters complete)
- **Specialized Topics**: `ML:Computer_Vision:XX`, `ML:Deep_Learning:XX`, etc.

### **Card Type Taxonomy**
1. **Problem Recognition** - "What algorithm for text similarity?"
2. **Implementation** - "Code the cosine similarity function"
3. **Mathematical Formula** - "Write the attention mechanism formula"
4. **Complexity Analysis** - "Time/space complexity of BERT fine-tuning?"
5. **Edge Case Handling** - "Handle empty documents in TF-IDF"
6. **Interview Insight** - "Why use attention over RNNs?"

### **Template Structure**
```python
"""
ANKI CARD: [Card Type] - [ML/NLP Topic]
DIFFICULTY: [Easy/Medium/Hard]
REVIEW TIME: [Target seconds]
WORKFLOW: JSON ‚Üí APKG ‚Üí Anki import
"""

def atomic_function():
    """
    FRONT: Clear, specific question
    BACK: 6-section structured answer (Concept, Intuition, Mechanics, Trade-offs, Applications, Memory Hook)
    
    JSON: Complete CrowdAnki format with professional styling
    APKG: Native Anki format for one-click import
    HIERARCHY: ML:[TOPIC]:XX [Chapter Name] structure
    """
    pass
```

### **Content Hierarchy**
```
Level 1: Core algorithm name/concept
Level 2: Key mathematical relationship  
Level 3: Implementation details
Level 4: Edge cases and optimizations
Level 5: Interview talking points
```

## üé® Visual Design Standards

### **Typography Hierarchy**
- **H1**: Topic title (24px, bold)
- **H2**: Subtopic (20px, bold)
- **Body**: Code/text (16px, mono for code)
- **Caption**: Metadata (14px, italic)

### **Color Coding System**
- **Blue**: Concepts and definitions
- **Green**: Correct implementations
- **Orange**: Formulas and math
- **Red**: Edge cases and warnings
- **Purple**: Interview insights

### **Code Syntax Rules**
```python
# REQUIRED ELEMENTS:
- Docstring with purpose
- Type hints where helpful
- Inline comments for KEY insights
- Edge case handling
- Complexity notation

# FORMATTING:
- 4-space indentation
- 79 character line limit
- PEP 8 compliance
- Descriptive variable names
```

## üìä Quality Assurance Metrics

### **Card Validation Checklist**
- [ ] Single concept per card
- [ ] 5-30 second review time
- [ ] Mobile-readable formatting
- [ ] Clear success criteria
- [ ] Relevant to interviews
- [ ] Proper difficulty calibration

### **Deck Health Indicators**
- **Card count**: 15-25 cards per chapter (proven with 226 NLP cards)
- **Success rate**: 80-90% on mature cards
- **Daily reviews**: 50-100 cards
- **New cards**: 15-25 per day
- **Retention rate**: >90% after 1 month
- **APKG generation**: Single command creates all files
- **Import success**: 100% compatibility with Anki (tested)

## üéì ML/AI Interview Flashcard Best Practices (Deep Research Summary)

### Question Patterns (Do This)
- **What/Why/When/How** single-target prompts with a short scenario cue
  - e.g., ‚ÄúIn transformers, what is self-attention?‚Äù
- **Contrast cards**: ‚ÄúWhen prefer X over Y?‚Äù (1 decision rule + 1 caveat)
- **Formula prompt**: ‚ÄúWrite [formula] and define symbols.‚Äù
- **Edge/failure**: ‚ÄúCommon failure of X and a fix?‚Äù

### Answer Blueprint (2‚Äì4 lines)
- **Line 1 (Gist)**: 1 plain-English intuition
- **Line 2 (Formula/Rule)**: single line if applicable
- **Line 3 (Symbols)**: short comma-separated defs (Q=query, ‚Ä¶)
- **Line 4 (When/Edge)**: optional, 1 line only

### Hard Constraints
- **No code** in questions/answers
- **One algorithm per card** (no splitting across multiple cards)
- **Immediate comprehension** (<5s to parse)
- **Review time**: 10‚Äì20s (new ‚â§30s)

### Examples (Style Reference)
- Self-attention: ‚ÄúWeigh tokens by relevance; Formula: softmax(QK^T/‚àöd_k)V; Symbols: Q/K/V/X; Edge: scale by ‚àöd_k to avoid peaky softmax.‚Äù
- BCE: ‚ÄúL = ‚àí[y log p + (1‚àíy) log(1‚àíp)]; y‚àà{0,1}, p=P(y=1|x); Intuition: penalize confident wrongs.‚Äù

### **Performance Testing**
```bash
# Generate APKG files from all JSON sources:
python generate_apkg.py

# Import to Anki and test:
# 1. Review time <30 seconds per card
# 2. Clear pass/fail on first attempt  
# 3. Readable on mobile device
# 4. Logical difficulty progression
# 5. Proper hierarchical organization in Anki
# 6. Professional styling and formatting
```

## üöÄ Implementation Workflow

### **Creating New Cards (APKG-First Workflow)**
1. **Use Custom Instructions** - Copy from README.md to AI assistant
2. **Provide chapter content** - Textbook, paper, or documentation
3. **Generate complete JSON** - AI creates CrowdAnki-compatible format
4. **Save in directory** - `data/source/flashcards/[TOPIC]/XX_chapter/XX_chapter.json`
5. **Generate APKG** - Run `python generate_apkg.py` from repository root
6. **Import to Anki** - Double-click generated `.apkg` file
7. **Verify hierarchy** - Creates `ML:[TOPIC]:XX [Chapter]` structure in Anki

### **Optimizing Existing Cards**
1. **Measure current performance** - Check success rates
2. **Identify problem cards** - >40% failure rate or >45s review time
3. **Split complex cards** - Break into atomic components
4. **Simplify language** - Remove unnecessary complexity
5. **Add visual cues** - Use formatting for rapid recognition

### **Deck Maintenance Schedule**
- **Daily**: Review performance metrics
- **Weekly**: Update low-performing cards
- **Monthly**: Analyze learning patterns
- **Pre-interview**: Generate focused review sets

## üí° Research-Backed Best Practices

### **Memory Science Applications**
- **Testing effect**: Active recall beats passive review
- **Spacing effect**: Distributed practice improves retention
- **Generation effect**: Creating answers improves memory
- **Picture superiority**: Visual elements enhance recall
- **Elaborative rehearsal**: Connecting concepts aids memory

### **Interview-Specific Optimizations**
- **Stress testing**: Practice under time pressure
- **Explanation practice**: Cards that require verbal description
- **Code writing**: Hand-coded solutions without IDE
- **Edge case recognition**: Rapid identification of corner cases
- **Pattern matching**: Quick algorithm selection for problems

---

**Remember**: The goal is not just memorization, but rapid, confident recall under interview pressure. Every card should pass the "3 AM on phone while tired" test - if you can't understand and answer it quickly in that state, it needs simplification.

## üéØ **Proven Success Metrics**
- **‚úÖ 226 NLP cards** successfully created and imported
- **‚úÖ APKG-first workflow** eliminates import friction
- **‚úÖ Professional styling** with modern fonts and color coding
- **‚úÖ Hierarchical organization** creates logical study structure
- **‚úÖ Universal compatibility** works on all Anki platforms
